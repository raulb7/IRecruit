<?php

namespace IRecruitBundle\Repository;

use IRecruitBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends \Doctrine\ORM\EntityRepository
{
    public function getActiveJobs($categoryId = null, $max = null, $offset = null, $affiliateId = null)
    {
        $qb = $this->createQueryBuilder('j')
            ->where('j.expiresAt > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere('j.isActivated = :activated')
            ->setParameter('activated', 1)
            ->orderBy('j.expiresAt', 'DESC');

        if ($max) {
            $qb->setMaxResults($max);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        if ($categoryId) {
            $qb->andWhere('j.categoryId = :categoryId')
                ->setParameter('categoryId', $categoryId);
        }

        if ($affiliateId) {
            $qb->leftJoin('j.category', 'c')
                ->leftJoin('c.affiliates', 'a')
                ->andWhere('a.id = :affiliateId')
                ->setParameter('affiliateId', $affiliateId)
            ;
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    public function countActiveJobs($categoryId = null)
    {
        $qb = $this->createQueryBuilder('j')
            ->select('count(j.id)')
            ->where('j.expiresAt > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere('j.isActivated = :activated')
            ->setParameter('activated', 1);
            ;
     
        if ($categoryId) {
            $qb->andWhere('j.category = :categoryId')
            ->setParameter('categoryId', $categoryId);
        }
     
        $query = $qb->getQuery();
     
        return $query->getSingleScalarResult();
    }

    public function getActiveJob($id)
    {
        $query = $this->createQueryBuilder('j')
            ->where('j.id = :id')
            ->setParameter('id', $id)
            ->andWhere('j.expiresAt > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere('j.isActivated = :activated')
            ->setParameter('activated', 1)
            ->setMaxResults(1)
            ->getQuery();
 
        $job = $query->getOneOrNullResult();
 
        return $job;
    }

    public function cleanup($days)
    {
        $query = $this->createQueryBuilder('j')
            ->delete()
            ->where('j.isActivated IS NULL')
            ->andWhere('j.createdAt < :createdAt')    
            ->setParameter('createdAt',  date('Y-m-d', time() - 86400 * $days))
            ->getQuery();
     
        return $query->execute();
    }

    public function getLatestPost($categoryId = null)
    {
        $query = $this->createQueryBuilder('j')
            ->where('j.expiresAt > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere('j.isActivated = :activated')
            ->setParameter('activated', 1)
            ->orderBy('j.expiresAt', 'DESC')
            ->setMaxResults(1);
 
        if($categoryId) {
            $query->andWhere('j.category = :categoryId')
                ->setParameter('categoryId', $categoryId);
        }
 
        try{
            $job = $query->getQuery()->getSingleResult();
        } catch(\Doctrine\Orm\NoResultException $e){
            $job = null;
        }
 
        return $job;    
    }

    public function getForLuceneQuery($query)
    {
        $hits = Job::getLuceneIndex()->find($query);
 
        $pks = array();
        foreach ($hits as $hit)
        {
          $pks[] = $hit->pk;
        }
 
        if (empty($pks))
        {
          return [];
        }
 
        $q = $this->createQueryBuilder('j')
            ->where('j.id IN (:pks)')
            ->setParameter('pks', $pks)
//            ->andWhere('j.isActivated = :active')
//            ->setParameter('active', 1)
//            ->setMaxResults(20)
            ->getQuery();
 
        return $q->getResult();
    }
}
